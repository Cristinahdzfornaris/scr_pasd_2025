

services:
  ray-head:
    build: .
    ports:
      - "8265:8265"
      - "10001:10001"
    volumes:
      - model_storage:/app/models_output
    # COMANDO MODIFICADO PARA MANTENER EL CONTENEDOR VIVO
    command: sh -c "ray start --head --port=6379 --ray-client-server-port=10001 --dashboard-host=0.0.0.0 --disable-usage-stats && tail -f /dev/null"

  ray-worker:
    build: .
    depends_on:
      - ray-head
    volumes:
      - model_storage:/app/models_output
    deploy:
      replicas: 2
    # COMANDO MODIFICADO PARA MANTENER EL CONTENEDOR VIVO
    command: sh -c "ray start --address=ray-head:6379 --disable-usage-stats && tail -f /dev/null"

  training-service:
    build: .
    depends_on:
      - ray-head
      - ray-worker
    volumes:
      - model_storage:/app/models_output
    environment:
      - RAY_ADDRESS=ray://ray-head:10001
    # Usamos el sleep para dar tiempo al clúster a estabilizarse
    command: sh -c "echo 'Esperando 10 segundos para que el clúster de Ray se estabilice...' && sleep 10 && python train.py"

  api-service:
    build: .
    depends_on:
      training-service:
        condition: service_completed_successfully
    volumes:
      - model_storage:/app/models_output
    ports:
      - "8000:8000"
    command: uvicorn api:app --host 0.0.0.0 --port 8000 --reload

  gui-service:
    build: .
    depends_on:
      # Forma larga para ambas dependencias
      ray-head:
        condition: service_started
      training-service:
        condition: service_completed_successfully
    volumes:
      - model_storage:/app/models_output
    ports:
      - "8501:8501"
    command: streamlit run gui.py --server.port=8501 --server.address=0.0.0.0

volumes:
  model_storage: